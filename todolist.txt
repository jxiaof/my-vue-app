# 项目名称: 我的静态网站

## 1. 项目初始化
- 使用 Vite 创建 Vue 项目
- 命令: `npm create vite@latest my-vue-app --template vue`
- 进入项目目录: `cd my-vue-app`
- 确保已安装 Node.js 和 npm。
- 初始化 Git 仓库: `git init`
- 创建 `.gitignore` 文件，忽略 `node_modules` 和其他不需要的文件。

## 2. 安装依赖
- 安装 Element Plus:
  - 命令: `npm install element-plus`
- 安装 Tailwind CSS 和相关工具:
  - 命令: `npm install -D tailwindcss postcss autoprefixer`
  - 初始化 Tailwind CSS: `npx tailwindcss init -p`
- 确保 `package.json` 中正确配置了所有依赖项。
- 在 `package.json` 中添加 `scripts` 部分:
  ```json
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "serve": "vite preview"
  }
  ```

## 3. 配置 Tailwind CSS
- 在 `tailwind.config.js` 中配置内容:
  - 添加自定义颜色:
    - 背景：浅灰色 (#ECF0F1)
    - 主标题：深蓝色 (#2C3E50)
    - 副标题和段落文本：中灰色 (#95A5A6)
    - 按钮：橙色 (#E67E22)（悬停时变为深橙色 #D35400）
    - 链接：橙色 (#E67E22)（正常状态），绿色 (#27AE60)（悬停状态）
  - 添加 `purge` 选项以优化生产环境的 CSS 文件大小:
    ```javascript
    purge: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}'],
    ```
- 示例配置代码可参考官方文档。

## 4. 引入样式
- 在 `src/index.css` 中添加 Tailwind 基础样式:
  - `@tailwind base;`
  - `@tailwind components;`
  - `@tailwind utilities;`
- 可在 `index.css` 中引入其他自定义样式:
  ```css
  body {
    font-family: 'Helvetica Neue', sans-serif;
  }
  ```

## 5. 引入 Element Plus
- 在 `src/main.js` 中引入 Element Plus 和 Tailwind CSS:
  ```javascript
  import { createApp } from 'vue';
  import App from './App.vue';
  import ElementPlus from 'element-plus';
  import 'element-plus/lib/theme-chalk/index.css';
  import './index.css';

  const app = createApp(App);
  app.use(ElementPlus);
  app.mount('#app');
  ```

## 6. 创建组件
- 创建 `Header.vue`:
  - 使用深蓝色作为背景，白色作为文本颜色。
  ```vue
  <template>
    <header class="bg-blue-900 text-white p-4">
      <h1>网站标题</h1>
    </header>
  </template>
  ```
- 创建 `Footer.vue`:
  - 使用中灰色作为背景，白色作为文本颜色。
  ```vue
  <template>
    <footer class="bg-gray-600 text-white p-4">
      <p>版权所有 © 2023</p>
    </footer>
  </template>
  ```
- 创建其他功能区域组件，例如：
  - `FeatureSection.vue`：展示网站的主要功能。
  - `FAQSection.vue`：常见问题解答区域。
  - `ContactSection.vue`：联系方式区域。
- 在 `App.vue` 中引入并使用这些组件。
- 提供每个组件的基本结构示例代码。

## 7. 页面布局
- 使用 Tailwind CSS 类来设置布局和样式:
  - 主内容区域使用浅灰色背景。
  - 主标题使用深蓝色，副标题和段落文本使用中灰色。
  - 按钮使用橙色，并在悬停时变为深橙色 (#D35400)。
  - 链接使用橙色 (#E67E22)（正常状态），悬停时变为绿色 (#27AE60)。
- 详细说明如何使用 Tailwind CSS 类实现特定布局效果。
- 示例页面布局代码:
  ```vue
  <template>
    <div class="bg-gray-100 min-h-screen">
      <Header />
      <main class="p-8">
        <h1 class="text-blue-900">欢迎来到我的网站</h1>
        <p class="text-gray-600">这是一个使用 Vue 和 Tailwind CSS 构建的静态网站。</p>
      </main>
      <Footer />
    </div>
  </template>
  ```

## 8. 功能区域
- **功能区域**（可下拉查看）:
  - **功能区1**: 描述功能1的内容。
  - **功能区2**: 描述功能2的内容。
  - **功能区3**: 描述功能3的内容。
  - **FAQ**: 提供常见问题的解答，使用折叠面板展示。
  - **联系方式**: 提供联系表单或信息。
- 提供折叠面板的示例代码:
  ```vue
  <template>
    <el-collapse>
      <el-collapse-item title="常见问题1" name="1">
        <div>问题1的解答内容。</div>
      </el-collapse-item>
      <el-collapse-item title="常见问题2" name="2">
        <div>问题2的解答内容。</div>
      </el-collapse-item>
    </el-collapse>
  </template>
  ```

## 9. H5 兼容性
- 确保使用现代 CSS 特性时提供兼容性:
  - 使用 Autoprefixer 自动添加浏览器前缀。
- 在 `index.html` 中添加适当的 meta 标签:
  - `<meta name="viewport" content="width=device-width, initial-scale=1.0">`
- 测试在不同移动设备和浏览器上的表现:
  - 特别关注 iOS 和 Android 设备的兼容性。
- 使用媒体查询确保响应式设计:
  - 根据屏幕大小调整布局和字体大小。
  - 示例媒体查询:
    ```css
    @media (max-width: 768px) {
      body {
        font-size: 14px;
      }
    }
    ```
- 使用工具（如 BrowserStack）进行跨浏览器测试。

## 10. 测试和运行
- 运行项目:
  - 命令: `npm run dev`
- 在浏览器中访问 `http://localhost:3000`。
- 处理常见的运行错误或调试技巧:
  - 检查控制台错误信息。
  - 确保所有依赖项已正确安装。

## 11. 进一步扩展
- 可添加更多组件和页面，如关于页面、联系页面等。
- 使用 Element Plus 的表单组件和其他 UI 元素。
- 提供使用 Element Plus 组件的示例代码:
  ```vue
  <template>
    <el-form>
      <el-form-item label="姓名">
        <el-input v-model="name"></el-input>
      </el-form-item>
    </el-form>
  </template>
  ```

## 12. 视觉一致性
- 确保整个网站在不同屏幕和设备上的显示效果一致。
- 根据需要调整颜色和样式以提高可读性和美观性。
- 使用 CSS 变量或主题来保持视觉一致性:
  ```css
  :root {
    --main-bg-color: #ECF0F1;
    --main-text-color: #2C3E50;
  }
  ```

